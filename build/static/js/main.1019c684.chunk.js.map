{"version":3,"sources":["pages/components/LineOfShipment.js","pages/components/SortNavigation.js","pages/components/TableOfShipments.js","pages/components/SearchTool.js","pages/components/Pagination.js","pages/MainPage.js","pages/helpers/helperFunctions.js","pages/components/FormToChangeShipmentValue.js","pages/components/ShipmentDetails.js","pages/ShipmentPage.js","store/ShipmentsStore.js","App.js","serviceWorker.js","index.js"],"names":["LineOfShipment","props","react_default","a","createElement","onClick","changePage","info","id","className","scope","name","mode","type","origin","destination","status","SortNavigation","map","el","sortCategory","handleSortClick","key","shortid","generate","sortDirection","TableOfShipments","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderShipments","bind","assertThisInitialized","_this2","shipments","React","Component","SearchTool","aria-label","onChange","event","searchById","Pagination","numberOfPages","changePageNumber","aria-hidden","react","pages","_loop","i","push","currentPage","pagination","ASC","MainPage","state","shownShipments","searchId","showShipmentsOfCurrentPage","sortByField","store","length","setState","calculateNumberOfPages","thisApp","axios","get","then","response","data","setShipments","catch","error","console","log","arguments","undefined","Math","ceil","operator","nextPage","calculateNewPageNumber","array","page","slice","sort","b","x","y","reverse","filterShipments","serialNumberOfFirstShipment","filter","substr","filteredShipments","target","value","setSelectedShipmentId","TableOfShipments_TableOfShipments","inject","observer","FormToChangeShipmentValue","htmlFor","fieldToChange","placeholder","concat","updateShipmentValue","tabIndex","isFormForValueChangeShown","submitFormForNewShipmentValue","ShipmentDetails","arrayOfInfo","shipmentDetails","changeableField","shipmentValue","infoPiece","index","shipmentValueDetails","key2","prepairShipmentsValuesForRender","showFormForValueChange","ShipmentPage","newValueForShipmentUpdate","preventDefault","modifyShipments","findCurrentShipmentInArray","find","obj","shipmentDetailsId","_this3","ShipmentsStore","shipmentId","findObj","shipmentBeforeChange","shipmentIndex","findIndex","shipmentAfterChange","assign","defineProperty","decorate","observable","action","App","isMainPage","index_module","pages_MainPage","pages_ShipmentPage","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1019c684.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function LineOfShipment(props) {\r\n  return (\r\n    <tr onClick={() => props.changePage(props.info.id)} className=\"App_table_shipment\">\r\n      <th scope=\"row\">{props.info.id}</th>\r\n      <td>{props.info.name}</td>\r\n      <td>{props.info.mode}</td>\r\n      <td>{props.info.type}</td>\r\n      <td>{props.info.origin}</td>\r\n      <td>{props.info.destination}</td>\r\n      <td>{props.info.status}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nLineOfShipment.propTypes = {\r\n  info: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function SortNavigation(props) {\r\n  let tableHeaders = ['id', 'name', 'mode', 'type', 'origin', 'destination', 'status'];\r\n\r\n  return (\r\n    <tr>\r\n      {tableHeaders.map(el =>\r\n        <th className={el === props.sortCategory ? \"App_active-filter\" : \"\"}\r\n            scope=\"col\"\r\n            onClick={() => props.handleSortClick(el)}\r\n            key={shortid.generate()}\r\n        >\r\n          {el}{\" \"}\r\n          {el === props.sortCategory &&\r\n            <div className={props.sortDirection === 'asc' ? \"asc\" : \"desc\"}></div>\r\n          }\r\n        </th>)\r\n      }\r\n    </tr>\r\n  );\r\n}\r\n\r\nSortNavigation.propTypes = {\r\n  sortCategory: PropTypes.string,\r\n  handleSortClick: PropTypes.func,\r\n  sortDirection: PropTypes.string,\r\n};","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport LineOfShipment from './LineOfShipment';\r\nimport SortNavigation from './SortNavigation';\r\n\r\nexport default class TableOfShipments extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.renderShipments = this.renderShipments.bind(this);\r\n  }\r\n\r\n  renderShipments() {\r\n    return this.props.shipments.map(el =>\r\n      <LineOfShipment\r\n        info={el}\r\n        key={shortid.generate()}\r\n        changePage={this.props.changePage}\r\n      />)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table className=\"table table-striped table-sm App_table\">\r\n        <thead>\r\n          <SortNavigation\r\n            handleSortClick={this.props.handleSortClick}\r\n            sortCategory={this.props.sortCategory}\r\n            sortDirection={this.props.sortDirection}\r\n          />\r\n        </thead>\r\n        <tbody>\r\n          {this.renderShipments()}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nTableOfShipments.propTypes = {\r\n  shipments: PropTypes.array,\r\n  handleSortClick: PropTypes.func,\r\n  sortCategory: PropTypes.string,\r\n  sortDirection: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function SearchTool(props) {\r\n  return (\r\n    <div className=\"App_navigation ml-auto my-3\">\r\n      <div className=\"input-group input-group-sm\">\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text\">Seacrh by ID</span>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          aria-label=\"First name\"\r\n          className=\"form-control\"\r\n          onChange={(event) => props.searchById(event)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchTool.propTypes = {\r\n  searchById: PropTypes.func,\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Pagination(props) {\r\n  let pagination = () => {\r\n    let pages = [];\r\n    for (let i = 1; i <= props.numberOfPages; i++) {\r\n      pages.push(\r\n        <li className={\"page-item \" + (props.currentPage === i ? \"active\" : \"\")} key={\"pageNumber\" + i}>\r\n          <span className=\"page-link text-secondary\"\r\n             onClick={() => props.changePageNumber(i)}>\r\n            {i}\r\n          </span>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return pages;\r\n  };\r\n\r\n  return (\r\n    <nav aria-label=\"Page navigation example\">\r\n      <ul className=\"pagination justify-content-center\">\r\n        {props.numberOfPages !== 1 &&\r\n          <li className=\"page-item\">\r\n            <span className=\"page-link text-secondary\" aria-label=\"Previous\" onClick={() => props.changePageNumber(\"-\")}>\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n            </span>\r\n          </li>\r\n        }\r\n        {props.numberOfPages !== 1 &&\r\n          <Fragment>\r\n            {pagination()}\r\n          </Fragment>\r\n        }\r\n        {props.numberOfPages !== 1 &&\r\n          <li className=\"page-item\">\r\n            <span className=\"page-link text-secondary\" aria-label=\"Next\" onClick={() => props.changePageNumber(\"+\")}>\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n            </span>\r\n          </li>\r\n        }\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nPagination.propTypes = {\r\n  numberOfPages: PropTypes.number,\r\n  currentPage: PropTypes.number,\r\n  changePageNumber: PropTypes.func,\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {inject, observer} from \"mobx-react/index\";\r\n\r\nimport TableOfShipments from './components/TableOfShipments';\r\nimport SearchTool from './components/SearchTool';\r\nimport Pagination from './components/Pagination';\r\nimport {sortByKey, calculateNewPageNumber} from './helpers/helperFunctions';\r\n\r\nconst ASC = 'asc';\r\nconst DESC = 'desc';\r\nconst SHIPMENTS_PER_PAGE = 20;\r\n\r\nclass MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      shownShipments: [], // {SHIPMENTS_PER_PAGE} shipments per page, so now 20 per page\r\n      numberOfPages:  1,\r\n      currentPage: 1,\r\n      sortCategory: 'id',\r\n      sortDirection: ASC,\r\n      searchId: '',\r\n    };\r\n\r\n    this.changePageNumber = this.changePageNumber.bind(this);\r\n    this.showShipmentsOfCurrentPage = this.showShipmentsOfCurrentPage.bind(this);\r\n    this.searchById = this.searchById.bind(this);\r\n    this.sortByField = this.sortByField.bind(this);\r\n    this.handleSortClick = this.handleSortClick.bind(this);\r\n    this.changePage = this.changePage.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.store.shipments.length) {\r\n      this.setState({numberOfPages: this.calculateNumberOfPages(this.props.store.shipments)});\r\n      this.sortByField(this.state.sortCategory, this.state.sortDirection);\r\n      return;\r\n    }\r\n\r\n    let thisApp = this;\r\n    axios.get('http://localhost:3004/shipments')\r\n      .then(function (response) {\r\n        thisApp.setState({\r\n          shownShipments: response.data, //bad practice to have loaded and changing shipments' list under one name\r\n          numberOfPages: thisApp.calculateNumberOfPages(response.data)\r\n        });\r\n\r\n        thisApp.props.store.setShipments(response.data);\r\n        thisApp.sortByField(thisApp.state.sortCategory, thisApp.state.sortDirection);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  calculateNumberOfPages(shipments = []) {\r\n    return Math.ceil(shipments.length / SHIPMENTS_PER_PAGE);\r\n  }\r\n\r\n  changePageNumber(operator) {\r\n    let nextPage = calculateNewPageNumber(operator, this.state.currentPage, this.state.numberOfPages);\r\n\r\n    this.setState({currentPage: nextPage});\r\n    this.sortByField(this.state.sortCategory, this.state.sortDirection, nextPage);\r\n  }\r\n\r\n  handleSortClick(sortCategory) {\r\n    let sortDirection = '';\r\n    if (sortCategory !== this.state.sortCategory) {\r\n      sortDirection = ASC;\r\n    } else {\r\n      sortDirection = this.state.sortDirection === ASC ? DESC : ASC;\r\n    }\r\n\r\n    this.sortByField(sortCategory, sortDirection);\r\n    this.setState({sortCategory: sortCategory, sortDirection: sortDirection});\r\n  }\r\n\r\n  sortByField(sortCategory, sortDirection, page = this.state.currentPage) {\r\n    let shipments = sortByKey(this.props.store.shipments.slice(), sortCategory);\r\n\r\n    if (sortDirection === DESC) {\r\n      shipments.reverse();\r\n    }\r\n\r\n    if (this.state.searchId) {\r\n      shipments = this.filterShipments(shipments, this.state.searchId);\r\n    }\r\n\r\n    if (page === undefined) {\r\n      page = this.state.currentPage;\r\n    }\r\n\r\n    this.showShipmentsOfCurrentPage(shipments, page);\r\n  }\r\n\r\n  showShipmentsOfCurrentPage(shipments, page) {\r\n    let serialNumberOfFirstShipment = SHIPMENTS_PER_PAGE * (page - 1);\r\n\r\n    this.setState({shownShipments: shipments.slice(serialNumberOfFirstShipment, serialNumberOfFirstShipment + SHIPMENTS_PER_PAGE)});\r\n  }\r\n\r\n  filterShipments(shipments, searchId) {\r\n    return shipments.filter(el => {\r\n      return el.id.substr(0, searchId.length) === searchId;\r\n    });\r\n  }\r\n\r\n  searchById(event) {\r\n    let shipments = this.props.store.shipments.slice();\r\n\r\n    let filteredShipments = this.filterShipments(shipments, event.target.value);\r\n\r\n    this.setState({\r\n      shownShipments: filteredShipments,\r\n      numberOfPages: this.calculateNumberOfPages(filteredShipments),\r\n      searchId: event.target.value,\r\n      currentPage: 1,\r\n    });\r\n  }\r\n\r\n  changePage(id) {\r\n    this.props.store.setSelectedShipmentId(id);\r\n    this.props.changePage();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h4>List of Shipments.</h4>\r\n        <SearchTool searchById={this.searchById}/>\r\n        <TableOfShipments\r\n          shipments={this.state.shownShipments}\r\n          handleSortClick={this.handleSortClick}\r\n          sortCategory={this.state.sortCategory}\r\n          sortDirection={this.state.sortDirection}\r\n          changePage={this.changePage}\r\n        />\r\n        <Pagination\r\n          numberOfPages={this.state.numberOfPages}\r\n          currentPage={this.state.currentPage}\r\n          changePageNumber={this.changePageNumber}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nMainPage = inject(\"store\")(\r\n  observer(\r\n    MainPage\r\n  )\r\n);\r\n\r\nexport default MainPage;\r\n\r\nMainPage.propTypes = {\r\n  changePage: PropTypes.func,\r\n};","function sortByKey(array, key) {\r\n  return array.sort(function(a, b) {\r\n    var x = a[key]; var y = b[key];\r\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n  });\r\n}\r\n\r\nfunction calculateNewPageNumber(operator, currentPage, numberOfPages) {\r\n  let nextPage;\r\n  if (typeof operator === \"number\") {\r\n    nextPage = operator;\r\n  } else if (typeof operator === \"string\") {\r\n    switch(operator) {\r\n      case \"+\":\r\n        nextPage = currentPage + 1;\r\n        break;\r\n      case \"-\":\r\n        nextPage = currentPage - 1;\r\n        break;\r\n      default:\r\n        nextPage = currentPage;\r\n        break;\r\n    }\r\n\r\n    if (nextPage < 1 || nextPage > numberOfPages) {\r\n      nextPage = currentPage;\r\n    }\r\n  }\r\n\r\n  return nextPage;\r\n}\r\n\r\nexport {sortByKey, calculateNewPageNumber};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FormToChangeShipmentValue(props) {\r\n  return (\r\n    <form className=\"form-inline\">\r\n      <div className=\"form-group mx-sm-3 mb-2\">\r\n        <label htmlFor=\"inputPassword2\" className=\"sr-only\">New Value for {props.fieldToChange}</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control form-control-sm\"\r\n          id=\"inputPassword2\"\r\n          placeholder={`New Value for ${props.fieldToChange}`}\r\n          onChange={(event) => props.updateShipmentValue(event)}\r\n          tabIndex={props.isFormForValueChangeShown ? 0 : ''}\r\n        />\r\n      </div>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"btn btn-secondary btn-sm mb-2\"\r\n        onClick={(event) => props.submitFormForNewShipmentValue(event)}\r\n      >\r\n        Save\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nFormToChangeShipmentValue.propTypes = {\r\n  updateShipmentValue: PropTypes.func,\r\n  submitFormForNewShipmentValue: PropTypes.func,\r\n  fieldToChange: PropTypes.string,\r\n  isFormForValueChangeShown: PropTypes.bool,\r\n};\r\n","import React, {Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ShipmentDetails(props) {\r\n  let prepairShipmentsValuesForRender = (shipmentValue) => {\r\n    let arrayOfJsx = shipmentValue.map((infoPiece, index) => {\r\n      let shipmentValueDetails = [];\r\n\r\n      for (let key2 in infoPiece) {\r\n        shipmentValueDetails.push(\r\n          <span key={key2}>\r\n            {`${key2} - ${infoPiece[key2]}`}\r\n            <br/>\r\n          </span>\r\n        );\r\n      }\r\n\r\n      return <Fragment key={index + 1}>\r\n        <i>{index + 1}{'. '}</i>\r\n        {shipmentValueDetails}\r\n      </Fragment>;\r\n    });\r\n\r\n    return arrayOfJsx;\r\n  };\r\n\r\n  let arrayOfInfo = [];\r\n  let shipmentDetails = props.shipmentDetails;\r\n\r\n  for (let key in shipmentDetails) {\r\n    let changeableField = key === \"name\";\r\n    let shipmentValue = shipmentDetails[key];\r\n\r\n    if (typeof shipmentValue === 'object') {\r\n      shipmentValue = prepairShipmentsValuesForRender(shipmentValue);\r\n    }\r\n\r\n    arrayOfInfo.push(\r\n      <div className=\"d-flex flex-row\">\r\n        <div className=\"App_shipment-details_key px-1\">\r\n          {key}\r\n        </div>\r\n        <div className=\"App_shipment-details_value px-1\">\r\n          {shipmentValue}\r\n          {changeableField && <input\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary btn-sm float-right\"\r\n            value=\"change\"\r\n            onClick={() => props.showFormForValueChange(key)}\r\n          />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"App_shipment-details d-flex flex-column mx-auto p-3 text-left bg-light\">\r\n      {arrayOfInfo}\r\n    </div>\r\n  );\r\n}\r\n\r\nShipmentDetails.propTypes = {\r\n  showFormForValueChange: PropTypes.func,\r\n  shipmentDetails: PropTypes.object,\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {inject, observer} from \"mobx-react/index\";\r\n\r\nimport FormToChangeShipmentValue from './components/FormToChangeShipmentValue';\r\nimport ShipmentDetails from './components/ShipmentDetails';\r\n\r\nclass ShipmentPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isFormForValueChangeShown: false,\r\n      fieldToChange: '',\r\n      newValueForShipmentUpdate: '',\r\n    };\r\n\r\n    this.showFormForValueChange = this.showFormForValueChange.bind(this);\r\n    this.updateShipmentValue = this.updateShipmentValue.bind(this);\r\n    this.submitFormForNewShipmentValue = this.submitFormForNewShipmentValue.bind(this);\r\n  }\r\n\r\n  showFormForValueChange(key) {\r\n    this.setState({isFormForValueChangeShown: !this.state.isFormForValueChangeShown, fieldToChange: key});\r\n  }\r\n\r\n  updateShipmentValue(event) {\r\n    this.setState({newValueForShipmentUpdate: event.target.value});\r\n  }\r\n\r\n  submitFormForNewShipmentValue(event) {\r\n    event.preventDefault();\r\n    this.props.store.modifyShipments(\r\n      this.findCurrentShipmentInArray().id,\r\n      this.state.fieldToChange,\r\n      this.state.newValueForShipmentUpdate,\r\n    );\r\n\r\n    this.setState({isFormForValueChangeShown: !this.state.isFormForValueChangeShown});\r\n  }\r\n\r\n  findCurrentShipmentInArray() {\r\n    return this.props.store.shipments.find(obj => obj.id === this.props.store.shipmentDetailsId);\r\n  }\r\n\r\n  render() {\r\n    let shipmentDetails = this.findCurrentShipmentInArray();\r\n\r\n    return (\r\n      <Fragment>\r\n        <h4>Details of the shipment <i>{shipmentDetails.id}</i>.</h4>\r\n        <ShipmentDetails\r\n          showFormForValueChange={this.showFormForValueChange}\r\n          shipmentDetails={shipmentDetails}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-secondary btn-sm mt-2\"\r\n          onClick={() => this.props.changePage()}\r\n        >\r\n          Back to Main Page\r\n        </button>\r\n        <div className=\"App_form-for-detail-change\">\r\n          {this.state.isFormForValueChangeShown &&\r\n            <FormToChangeShipmentValue\r\n              isFormForValueChangeShown={this.state.isFormForValueChangeShown}\r\n              fieldToChange={this.state.fieldToChange}\r\n              updateShipmentValue={this.updateShipmentValue}\r\n              submitFormForNewShipmentValue={this.submitFormForNewShipmentValue}\r\n            />\r\n          }\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nShipmentPage = inject(\"store\")(\r\n  observer(\r\n    ShipmentPage\r\n  )\r\n);\r\n\r\nexport default ShipmentPage;\r\n\r\nShipmentPage.propTypes = {\r\n  changePage: PropTypes.func,\r\n};\r\n\r\n","import { observable, action, decorate } from \"mobx\";\r\n\r\nclass ShipmentsStore {\r\n  shipments = [];\r\n  shipmentDetailsId = \"\";\r\n\r\n  modifyShipments(shipmentId, key, value) {\r\n    if (!value) return;\r\n\r\n    const findObj = obj => obj.id === shipmentId;\r\n    let shipmentBeforeChange = this.shipments.find(findObj);\r\n    let shipmentIndex = this.shipments.findIndex(findObj);\r\n    let shipmentAfterChange = Object.assign({}, shipmentBeforeChange, {[key]: value});\r\n\r\n    this.shipments[shipmentIndex] = shipmentAfterChange;\r\n  }\r\n\r\n  setShipments(shipments) {\r\n    this.shipments = shipments;\r\n  }\r\n\r\n  setSelectedShipmentId(id) {\r\n    this.shipmentDetailsId = id;\r\n  }\r\n}\r\n\r\ndecorate(ShipmentsStore, {\r\n  shipments: observable,\r\n  modifyShipments: action,\r\n  setShipments: action,\r\n  shipmentDetailsId: observable,\r\n  setSelectedShipmentId: action,\r\n});\r\n\r\nexport default ShipmentsStore;","import React from 'react';\nimport { Provider } from \"mobx-react\";\n\nimport './App.scss';\nimport MainPage from './pages/MainPage';\nimport ShipmentPage from './pages/ShipmentPage';\nimport ShipmentsStore from './store/ShipmentsStore';\n\nconst store = new ShipmentsStore();\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isMainPage: true\n    };\n\n    this.changePage = this.changePage.bind(this);\n  }\n\n  changePage() {\n    this.setState({isMainPage: !this.state.isMainPage})\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          {this.state.isMainPage && <MainPage\n            changePage={this.changePage}\n          />}\n          {!this.state.isMainPage && <ShipmentPage\n            changePage={this.changePage}\n          />}\n        </div>\n      </Provider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}